let config={responsive:!0,scrollZoom:!0};function plotFig1(e){try{if(Plotly.purge(e),null==jsondata.psi||null==jsondata.V||null==jsondata.E||null==jsondata.r_A)return;let t=[],r=parseInt($("#var_j_to_print").val()),a=parseInt($("#var_v_max").val()),l=jsondata.V[r],o=jsondata.psi[r],n=jsondata.E[r],i=jsondata.r_A,s=i.min(),c=i.max();if(dx=.25*(c-s),$("#var_isV").prop("checked")&&t.push({x:i,y:l,mode:"lines",type:"scatter",name:"$ \\text{Potential energy} $",line:{color:"rgb(0, 0, 0)",width:2}}),$("#var_isEnergies").prop("checked")){var u=[],m=[];for(let p=0;p<a;p++)u.push(s,c,null),m.push(n[p],n[p],null);t.push({x:u,y:m,mode:"lines",type:"scatter",name:"energy",annotation:"(v j) = (${v} ${j})",line:{color:"rgb(0, 99, 250)",width:2,dash:"dashdot"}})}if($("#var_isProbability").prop("checked")){let g,x;for(let v=0;v<a;v++)v==n.length-1?0==v&&(g=Auto_scale(l.slice(1,-1).max()-n[v],o[v],!0)):g=Auto_scale(n[v+1]-n[v],o[v],!0),x=o[v].map(e=>g*e*e+n[v]),t.push({x:i,y:x,type:"scatter",name:"WF",showlegend:!1,line:{color:"rgb(99,0,250)",width:2}})}switch(lang){case 0:titles="$ \\text{Potential energy profile } (j ="+j+")$",xlabel="$r(\\text{\xc5})$",ylabel="$E (cm^{-1})$";break;case 1:titles="$ \\text {Profil d'\xe9nergie potentielle } (j ="+j+")$",xlabel="$r(\\text{\xc5})$",ylabel="$E (cm^{-1})$"}let y=l.min(),h=l[l.length-1],f=.2*(h-y);var d={template:layout_template,title:titles,xaxis:{range:[s-dx,c+dx],title:xlabel},yaxis:{title:ylabel,range:[y-f,h+f]}};Plotly.newPlot(e,{data:t,layout:d,config:config})}catch(_){console.error("An error occurred: "+_.message)}}function plotFig2(e){try{if(Plotly.purge(e),null==jsondata.psi)return;let t=[],r=0,a=0,l=parseInt($("#var_j_to_print").val()),o=parseInt($("#Eigenvalues").val()),n=jsondata.r_A,i=jsondata.psi;switch(r=o%l,a=Math.floor(o/l),t.push({x:n,y:i[r][a],type:"scatter",name:"w.f. for j="+r+"v="+a}),lang){case 0:titles="$\\text{Wave functions}$",xlabel="$r\\text{\xc5}$",ylabel="$\\psi_{"+a+r+"}(x)\\text{ (a.u.)}$";break;case 1:titles="$\\text{Fonction d'onde}$",xlabel="$r\\text{\xc5}$",ylabel="$\\psi_{"+a+r+"}(x)\\text{ (a.u.)}$"}var s=i[a].min(),c=i[a].max(),u=.2*(c-s),m={template:layout_template,title:titles,xaxis:{range:[.125,2.375],title:xlabel},yaxis:{title:ylabel,range:[s-u,c+u]}};Plotly.newPlot(e,{data:t,layout:m,config:config})}catch(p){console.error("An error occurred: "+p.message)}}function plotFig3_RC(e){try{if(Plotly.purge(e),null==jsondata.Bv)return;let t=[],r=parseInt($("#var_v_max").val()),a=jsondata.Bv[0];switch(t.push({x:r-1,y:a,mode:"markers",type:"scatter",name:"c.s",marker:{color:"rgb(231, 99, 250)",size:8}}),lang){case 0:case 1:titles="$ \\text{Rotational constant }(j = 0)$",xlabel="$v$",ylabel="$B_v (cm^{-1})$"}let l=a.min(),o=a.max(),n=.2*(o-l);var i={template:layout_template,title:titles,xaxis:{range:[-1,r-1+1],title:xlabel},yaxis:{title:ylabel,range:[l-n,o+n]}};Plotly.newPlot(e,{data:t,layout:i,config:config})}catch(s){console.error("An error occurred: "+s.message)}}function getRandomColor(){let e="#";for(let t=0;t<6;t++)e+="0123456789ABCDEF"[Math.floor(16*Math.random())];return e}function getLineType(e){return["solid","dash","dot","longdash","longdashdot","dashdot"][e%6]}function plotFig3_ES(e){try{if(Plotly.purge(e),null==jsondata.E)return;let t=[],r=parseInt($("#var_j_to_print").val()),a=parseInt($("#var_v_max").val()),l=jsondata.E,o=[];for(let n=0;n<a;n++){let i=getRandomColor();for(let s=0;s<r;s++){let c=[],u=[];c.push(0,1,null),u.push(l[s][n],l[s][n],null),t.push({x:c,y:u,mode:"lines",type:"scatter",name:`E[${n}${s}]`,line:{color:i,width:2,dash:getLineType(s)}}),o.push({x:.2,y:l[r][n]+500,text:"$ v ="+n+"$",showarrow:!1})}}switch(lang){case 0:titles="$\\text{Energy spectrum}$",xlabel="$$",ylabel="$E_{vj}$";break;case 1:titles="$\\text{Energy spectrum}$",xlabel="",ylabel=""}let m=l[0][0],p=l[r][a-1],g=.2*(p-m);var x={template:layout_template,title:titles,xaxis:{range:[-.25,1.25],title:xlabel},yaxis:{title:ylabel,range:[m-g,p+g]},annotations:o};Plotly.newPlot(e,{data:t,layout:x,config:config})}catch(v){console.error("An error occurred: "+v.message)}}function plotFig3_3(e){try{if(Plotly.purge(e),null==jsondata.E)return;let t=[],r=parseInt($("#var_v_max").val()),a=jsondata.E[0],l=[];for(let o=0;o<r-1;o++)l.push(a[o+1]-a[o]);switch(t.push({x:r,y:l,mode:"markers",type:"scatter",marker:{color:"rgb(231, 99, 250)",size:8}}),lang){case 0:titles="$\\text{Energy gap} (j =0)$",xlabel="$v$",ylabel="$E_{v+1 0}-E_{v 0}$";break;case 1:titles="$\\text{Ecart d'energy} (j =0)",xlabel="$v$",ylabel="$E_{(v+1) 0}-E_{v 0}$"}let n=r-1,i=.25*(n-0),s=l.min(),c=l.max(),u=.2*(c-s);var m={template:layout_template,title:titles,xaxis:{range:[0-i,n+i],title:xlabel},yaxis:{title:ylabel,range:[s-u,c+u]}};Plotly.newPlot(e,{data:t,layout:m,config:config})}catch(p){console.error("An error occurred: "+p.message)}}function plotFig3_4(e){try{if(Plotly.purge(e),null==jsondata.E)return;let t=[],r=parseInt($("#var_j_to_print").val()),a=parseInt($("#var_v_max").val()),l=jsondata.E,o=[];for(let n=0;n<r;n++)o.push((l[n+1][0]-l[n][0])/2/(n+1));switch(t.push({x:a,y:o,mode:"markers",type:"scatter",marker:{color:"rgb(231, 99, 250)",size:8}}),lang){case 0:case 1:titles="$ v =0$",xlabel="$j$",ylabel="$\\frac{E_{0(j+1)}-E_{0j}}{2(j+1)}$"}let i=r,s=.25*(i-0),c=o.min(),u=o.max(),m=.2*(u-c);var p={template:layout_template,title:titles,xaxis:{range:[0-s,i+s],title:xlabel},yaxis:{title:ylabel,range:[c+m,u+m]}};Plotly.newPlot(e,{data:t,layout:p,config:config})}catch(g){console.error("An error occurred: "+g.message)}}function plotFig4_DM(e){try{if(Plotly.purge(e),null==jsondata.D)return;let t=[],r=jsondata.r_A,a=jsondata.D;switch(t.push({x:r,y:a,mode:"lines",type:"scatter",line:{width:2}}),lang){case 0:titles="Dipole moment",xlabel="$r(A)$",ylabel="$D(r) (Debye)$";break;case 1:titles="Moment dipolaire",xlabel="$r(A)$",ylabel="$D(r) (Debye)$"}var l={template:layout_template,title:titles,xaxis:{range:[.05,3],title:xlabel},yaxis:{title:ylabel,range:[-.3,.7]},hovermode:"closest"};Plotly.newPlot(e,{data:t,layout:l,config:config})}catch(o){console.error("An error occurred: "+o.message)}}function plotFig4_SR(e){try{if(Plotly.purge(e),null==jsondata.I1)return;let t=[],r=parseInt($("#var_v_max").val()),a=jsondata.I1;t.push({z:a,type:"heatmap",colorscale:"Cividis"});let l=[];for(let o=0;o<r;o++)for(let n=0;n<r;n++)l.push({x:n,y:o,text:a[o][n].toFixed(4),showarrow:!1});switch(lang){case 0:case 1:titles="",xlabel="$(vj)=(v0)$",ylabel="$(v'j')=(v'0)$"}var i={template:layout_template,title:titles,xaxis:{range:[-.9,r-.1],title:xlabel,zeroline:!1},yaxis:{title:ylabel,range:[r-.1,-.9],zeroline:!1},annotations:l,hovermode:"closest"};Plotly.newPlot(e,{data:t,layout:i,config:config})}catch(s){console.error("An error occurred: "+s.message)}}function plotFig4_SR2(e){try{if(Plotly.purge(e),null==jsondata.I2)return;let t=[],r=parseInt($("#var_j_to_print").val()),a=parseInt($("#var_m").val()),l=parseInt($("#var_m_p").val()),o=jsondata.I2,n=[];for(let i=0;i<r;i++){let s=[];for(let c=0;c<r;c++)s.push(o[i][c][l][a]);n.push(s)}t.push({z:n,type:"heatmap",colorscale:"Cividis"});let u=[];for(let m=0;m<r;m++)for(let p=0;p<r;p++)u.push({x:p,y:m,text:n[m][p].toFixed(4),showarrow:!1});switch(lang){case 0:case 1:titles="$(m'm) = ("+l+a+")$",xlabel="$(vj)=(0j)$",ylabel="$(v'j')=(1j')$"}var g={template:layout_template,title:titles,xaxis:{range:[-.9,r-.1],title:xlabel,zeroline:!1},yaxis:{title:ylabel,range:[r-.1,-.9],zeroline:!1},annotations:u};Plotly.newPlot(e,{data:t,layout:g,config:config})}catch(x){console.error("An error occurred: "+x.message)}}function plotFig5(e){try{if(Plotly.purge(e),null==jsondata.Delta_P||null==jsondata.Delta_R||null==jsondata.P||null==jsondata.R)return;let t=[];annotations=[],images=[];let r=jsondata.P,a=jsondata.R,l=jsondata.Delta_P,o=jsondata.Delta_R,n=parseInt($("#var_j_max").val()),i=Math.max(a.max(),r.max());for(let s=0;s<n-1;s++)r[s]/=i,a[s]/=i;if("resultFig5_1"==e){var c,u;t.push({x:o,y:a,mode:"markers",type:"scatter",name:"R",annotation:"P",marker:{color:"blue",size:8}}),t.push({x:l,y:r,mode:"markers",type:"scatter",name:"P",annotation:"P",marker:{color:"red",size:8}}),c=Math.min(l.min(),o.min()),u=Math.max(l.max(),o.max())}if("resultFig5_2"==e){if(null==jsondata.Convoluted_Intensity||null==jsondata.Energy)return;let m=jsondata.Convoluted_Intensity,p=jsondata.Energy;t.push({x:p,y:m,mode:"lines",type:"scatter",name:"$\\text{Experimental spectrum}$",line:{width:2,color:"black"}}),c=p.min(),u=p.max();for(let g=0;g<n-1;g++)annotations.push({x:l[g],y:r[g]+.15*r[g],text:"$P_{"+g+"}$",showarrow:!1,font:{size:8}});for(let x=0;x<n-1;x++)annotations.push({x:o[x],y:a[x]+.15*a[x],text:"$R_{"+x+"}$",showarrow:!1,font:{size:8}})}switch(lang){case 0:case 1:titles="",xlabel="$ \\text{Energy, } E_{vj} (cm^{-1})$",ylabel="$ \\text{Relative intensity}$"}var v={template:layout_template,title:titles,xaxis:{range:[u+.05*(u-c),c-.05*(u-c),],title:xlabel},yaxis:{title:ylabel,range:[0,1.2]},hovermode:"closest",annotations:annotations,images:images};Plotly.newPlot(e,{data:t,layout:v,config:config})}catch(y){console.error("An error occurred: ",y)}}